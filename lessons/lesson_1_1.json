{
  "objective": "Learn to evaluate Python expressions and identify common data types: `str`, `int`, `float`, and `bool`.",
  "blocks": [
    {
      "type": "text",
      "content": "# Python Basics: Expressions & Data Types\n\n### Objective:\nLearn to evaluate Python expressions and identify common data types: `str`, `int`, `float`, and `bool`."
    },
    {
      "type": "text",
      "content": "## Introduction: What are Expressions?\n\nImagine you have a calculator. When you type in `5 + 3` and press enter, the calculator *evaluates* that input to give you `8`. In Python, we do something very similar!\n\nAn **expression** in Python is a combination of values, variables, operators, and function calls that the Python interpreter processes to produce a **single result**.\n\n* Think of it like a mathematical phrase or a complete thought that has a definite answer.\n* Expressions are the fundamental building blocks of all Python programs. Understanding how they work is crucial for writing code that does what you intend!"
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "# Examples of Expressions:\n\n5 + 3           # This evaluates to 8\n10 / 2          # This evaluates to 5.0\n\"Hello\" + \"World\" # This evaluates to \"HelloWorld\"\n5 > 3           # This evaluates to True"
    },
    {
      "type": "text",
      "content": "## Data Types: The Kinds of Information Python Handles\n\nJust like in the real world, different kinds of information behave differently. You wouldn't add words and numbers the same way, right? In Python, we have **data types** to categorize information.\n\nPython is \"dynamically typed,\" meaning you don't have to explicitly state a variable's type, but knowing the types is still incredibly important for predicting how your code will behave."
    },
    {
      "type": "text",
      "content": "### 1. Strings (`str`):\n\nStrings are used for **text**. They are sequences of characters (letters, numbers, symbols, spaces) enclosed in **single quotes (`' '`)** or **double quotes (`\" \"`)**.\n\n* **Examples:** `\"Hello, World!\"`, `'Python'`, `\"123\"` (this is text, not the number 123!), `\" \"`\n* **Common Operations:**\n    * Concatenation: `+` (Joins strings together)\n    * Repetition: `*` (Repeats a string a specified number of times)\n\n<span style='color:#b8860b;font-weight:600;font-size:1.08em;display:block;margin:1em 0;'>\n⚠️ <strong style='color:#e25822;'>Warning!</strong> You cannot perform mathematical operations like subtraction or division on strings, even if they look like numbers! <code>\"10\" - 5</code> would cause an error because <code>\"10\"</code> is text, not a numerical value.\n</span>"
    },
    {
      "type": "ide",
      "id": "try_hello_world",
      "label": "Try it yourself: Print your first string!",
      "editable": true,
      "default_code": "# Type your code below to print 'Hello, World!'\n",
      "hint": "Use print(\"Hello, World!\") to display the message."
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "print(\"Hello\" + \" \" + \"Python!\") # Output: HelloWorld Python!\nprint(\"ha\" * 3)                   # Output: hahaha\nprint('The answer is: ' + str(42)) # Output: The answer is: 42\n                                  # We use str() to convert the number 42 into a string"
    },
    {
      "type": "text",
      "content": "### 2. Integers (`int`)\n\nIntegers are simply **whole numbers** (positive, negative, or zero) without any decimal point.\n\n* **Examples:** `5`, `-100`, `0`, `12345`\n* **Common Operations:**\n    * Addition: `+`\n    * Subtraction: `-`\n    * Multiplication: `*`\n    * Division: `/` (**Important!** This always gives a **float** result, even if it's a whole number like `5.0`)\n    * Floor Division: `//` (Divides and discards the fractional part, giving an integer)\n    * Modulo: `%` (Returns the remainder of a division)\n    * Exponentiation: `**` (Raises a number to a power)"
    },
    {
      "type": "ide",
      "id": "try_integers",
      "label": "Try it yourself: Play with integers!",
      "editable": true,
      "default_code": "# Try some integer operations below!\n# Example: print(7 * 3)\n",
      "hint": "Use print() to see the result of integer operations."
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "print(10 + 5)    # Output: 15\nprint(20 - 7)    # Output: 13\nprint(4 * 6)     # Output: 24\nprint(15 / 3)    # Output: 5.0 (Notice it's a float!)\nprint(17 // 5)   # Output: 3 (17 divided by 5 is 3 with a remainder)\nprint(17 % 5)    # Output: 2 (The remainder of 17 divided by 5 is 2)\nprint(2 ** 3)    # Output: 8 (2 to the power of 3, or 2 * 2 * 2)"
    },
    {
      "type": "text",
      "content": "### 3. Floating-Point Numbers (`float`)\n\nFloats are numbers that have a **decimal point**. They are used to represent real numbers, including fractions.\n\n* **Examples:** `3.14`, `-0.5`, `10.0` (even if it ends in .0, it's a float!), `2.71828`\n* **Common Operations:** Floats can use the same arithmetic operations as integers.\n\n**Think about it:** If you divide `10` by `2` using `/`, Python will give you `5.0` (a float). If you want an integer result (if possible), use `//` (floor division)."
    },
    {
      "type": "ide",
      "id": "try_floats",
      "label": "Try it yourself: Experiment with floats!",
      "editable": true,
      "default_code": "# Try some float operations below!\n# Example: print(3.5 + 2.1)\n",
      "hint": "Use print() to see the result of float operations."
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "print(3.5 + 2.1)   # Output: 5.6\nprint(10.0 * 2)    # Output: 20.0\nprint(10 / 4)      # Output: 2.5 (Remember, division always yields a float!)"
    },
    {
      "type": "text",
      "content": "### 4. Booleans (`bool`)\n\nBooleans represent **truth values**. There are only two possible values: **`True`** or **`False`**. Notice the capital 'T' and 'F' – Python is case-sensitive!\n\nBooleans are typically the result of **comparison operations** or are used in **logical operations**.\n\n* **Examples:** `True`, `False`\n* **Comparison Operators (give a boolean result):**\n    * Greater than: `>`\n    * Less than: `<`\n    * Greater than or equal to: `>=`\n    * Less than or equal to: `<=`\n    * Equal to: `==` (**Two equal signs for comparison!**)\n    * Not equal to: `!=`\n* **Logical Operators (combine boolean values):**\n    * `and`: Returns `True` if *both* sides are `True`.\n    * `or`: Returns `True` if *at least one* side is `True`.\n    * `not`: Reverses the truth value (`not True` is `False`, `not False` is `True`).\n\n**CRITICAL DISTINCTION:**\n* `=` (single equal sign) is for **assignment** (e.g., `x = 5` means \"store the value 5 in a variable called x\").\n* `==` (double equal sign) is for **comparison** (e.g., `x == 5` means \"is the value of x equal to 5?\")."
    },
    {
      "type": "ide",
      "id": "try_booleans",
      "label": "Try it yourself: Test boolean logic!",
      "editable": true,
      "default_code": "# Try some boolean expressions below!\n# Example: print(5 > 2 and 3 < 1)\n",
      "hint": "Use print() to see the result of boolean expressions."
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "# Examples of Boolean Operations:\n\nprint(5 > 3)            # Output: True\nprint(10 == 10)         # Output: True\nprint(\"apple\" != \"orange\") # Output: True\nprint(7 <= 7)           # Output: True\nprint(True and False)   # Output: False\nprint(True or False)    # Output: True\nprint(not True)         # Output: False\nprint((5 > 2) and (10 < 5)) # Output: False (True and False is False)"
    },
    {
      "type": "text",
      "content": "## The Handy `type()` Function\n\nSometimes you might not be sure what data type a value or expression will result in. Python provides a built-in function called **`type()`** that tells you exactly that!\n\nJust put the value or expression inside the parentheses, and Python will tell you its type."
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "# Examples using the `type()` function:\n\nprint(type(100))        # Output: <class 'int'>\nprint(type(3.14))       # Output: <class 'float'>\nprint(type(\"Hello\"))    # Output: <class 'str'>\nprint(type(False))      # Output: <class 'bool'>\nprint(type(10 / 2))     # Output: <class 'float'> (Even though 10/2 is 5, it's 5.0)\nprint(type(\"5\" + \"5\"))  # Output: <class 'str'>"
    },
    {
      "type": "text",
      "content": "## Operator Precedence: The Order of Operations\n\nJust like in math, Python follows specific rules for evaluating expressions with multiple operators. You might remember PEMDAS or BODMAS from your math classes – Python has a similar order!\n\nHere's a simplified order from highest precedence (evaluated first) to lowest:\n\n1.  **Parentheses `()`**: Anything inside parentheses is evaluated first.\n2.  <strong>Exponentiation <code>**</code></strong>\n3.  <strong>Multiplication <code>*</code>, Division <code>/</code>, Floor Division <code>//</code>, Modulo <code>%</code></strong> (from left to right)\n4.  <strong>Addition <code>+</code>, Subtraction <code>-</code></strong> (from left to right)\n5.  <strong>Comparison Operators <code>==</code>, <code>!=</code>, <code><</code>, <code>></code>, <code><=</code>, <code>>=</code></strong>\n6.  <strong>Logical Operators <code>not</code>, <code>and</code>, <code>or</code></strong> (in that order: <code>not</code> first, then <code>and</code>, then <code>or</code>)\n\nWhen in doubt, use parentheses <code>()</code> to explicitly define the order you want!"
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "# Practice Evaluation: Step-by-Step\n\n# Expression 1: 5 + 3 * 2\n# Step 1: Multiplication first (3 * 2) -> 6\n# Step 2: Addition (5 + 6) -> 11\nprint(5 + 3 * 2) # Output: 11\n\n# Expression 2: (5 + 3) * 2\n# Step 1: Parentheses first (5 + 3) -> 8\n# Step 2: Multiplication (8 * 2) -> 16\nprint((5 + 3) * 2) # Output: 16\n\n# Expression 3: 10 // 3 * 2\n# Step 1: Floor Division (10 // 3) -> 3\n# Step 2: Multiplication (3 * 2) -> 6\nprint(10 // 3 * 2) # Output: 6\n\n# Expression 4: True and (5 > 2)\n# Step 1: Parentheses (5 > 2) -> True\n# Step 2: Logical AND (True and True) -> True\nprint(True and (5 > 2)) # Output: True\n\n# Expression 5: \"Py\" + \"thon\" * 2\n# Step 1: String Repetition (\"thon\" * 2) -> \"thonthon\"\n# Step 2: String Concatenation (\"Py\" + \"thonthon\") -> \"Pythonthon\"\nprint(\"Py\" + \"thon\" * 2) # Output: Pythonthon"
    },
    {
      "type": "text",
      "content": "## Common Pitfalls and Type Errors to Watch Out For!\n\n* **Mixing Incompatible Types:** You can't just add a number to a string without converting it."
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "# Example of Type Error:\n\n# print(\"Hello\" + 5) # This will cause a TypeError!\n# You need to convert the number to a string first:\nprint(\"Hello\" + str(5)) # Output: Hello5"
    },
    {
      "type": "text",
      "content": "* **Assignment vs. Comparison:** Remember the difference between `=` (assignment) and `==` (comparison).\n* **Case Sensitivity:** Python is very particular about capitalization. `True` is a boolean, `true` is just a word!\n* **Dividing by Zero:** Just like in math, you cannot divide any number by zero in Python. This will cause a `ZeroDivisionError`."
    },
    {
      "type": "quiz_section",
      "id": "main_quiz_section",
      "content": {
        "progress": {
          "total": 5,
          "completed": 0
        },
        "header": "Take the quiz to see your grade.",
        "blocks": [
          {
            "type": "fill_in_the_blanks",
            "id": "practice_datatypes",
            "instructions": "Part 1: Identify the Data Type",
            "questions": [
              { "text": "`42` is of type: _________. <span class='points-badge'>1 pt</span>", "answers": ["int", "integer"] },
              { "text": "`7.0` is of type: _________. <span class='points-badge'>1 pt</span>", "answers": ["float", "floating-point"] },
              { "text": "`\"Coding is fun!\"` is of type: _________. <span class='points-badge'>1 pt</span>", "answers": ["str", "string"] },
              { "text": "`False` is of type: _________. <span class='points-badge'>1 pt</span>", "answers": ["bool", "boolean"] },
              { "text": "`100 / 10` is of type: _________. <span class='points-badge'>1 pt</span>", "answers": ["float", "floating-point"] },
              { "text": "`\"123\" + \"abc\"` is of type: _________. <span class='points-badge'>1 pt</span>", "answers": ["str", "string"] },
              { "text": "`(20 > 5) and (10 == 10)` is of type: _________. <span class='points-badge'>1 pt</span>", "answers": ["bool", "boolean"] },
              { "text": "`10 * 3.5` is of type: _________. <span class='points-badge'>1 pt</span>", "answers": ["float", "floating-point"] }
            ]
          },
          {
            "type": "multiple_choice_quiz",
            "id": "quiz_concepts",
            "instructions": "Part 2: Multiple Choice",
            "questions": [
              {
                "question": "What is the result of `7 * (3 + 2)`? <span class='points-badge'>1 pt</span>",
                "options": ["21", "28", "35", "17"],
                "correct_index": 2
              },
              {
                "question": "Which operator always results in a `float` in Python? <span class='points-badge'>1 pt</span>",
                "options": ["`+` (addition)", "`-` (subtraction)", "`*` (multiplication)", "`/` (division)"],
                "correct_index": 3
              },
              {
                "question": "What is the output of `\"Go!\" * 2`? <span class='points-badge'>1 pt</span>",
                "options": ["`\"Go!Go!\"`", "`\"Go! Go!\"`", "`\"Go!2\"`", "Error"],
                "correct_index": 0
              },
              {
                "question": "Which of these is a boolean value? <span class='points-badge'>1 pt</span>",
                "options": ["`\"True\"`", "`0`", "`False`", "`1`"],
                "correct_index": 2
              },
              {
                "question": "What does `type(99)` return? <span class='points-badge'>1 pt</span>",
                "options": ["`<class 'float'>`", "`<class 'str'>`", "`<class 'int'>`", "`<class 'bool'>`"],
                "correct_index": 2
              }
            ]
          },
          {
            "type": "drag_and_drop",
            "id": "match_datatypes",
            "instructions": "Match the Python data type to its correct description.",
            "stems": [
              "`str` (String)",
              "`int` (Integer)",
              "`float` (Floating-point Number)",
              "`bool` (Boolean)"
            ],
            "options": [
              "Text or sequence of characters, enclosed in quotes.",
              "A whole number, positive, negative, or zero.",
              "A number with a decimal point.",
              "Represents truth values: `True` or `False`."
            ],
            "correct_mapping": {
              "`str` (String)": "Text or sequence of characters, enclosed in quotes.",
              "`int` (Integer)": "A whole number, positive, negative, or zero.",
              "`float` (Floating-point Number)": "A number with a decimal point.",
              "`bool` (Boolean)": "Represents truth values: `True` or `False`."
            }
          }
        ]
      }
    },
    {
      "type": "debug_challenge",
      "id": "fix_type_error",
      "label": "**Fix the bug!**",
      "buggy_code": "message = \"The answer is: \"\nnumber = 10\nprint(message + number)",
      "solution": {
        "explanation": "The error occurs because you cannot directly concatenate a string (`message`) with an integer (`number`). Python needs both parts of the `+` operation to be of the same type (strings, in this case). The fix is to convert the `number` to a string using `str()` before concatenation.",
        "correct_code": "message = \"The answer is: \"\nnumber = 10\nprint(message + str(number))"
      }
    }
  ]
}