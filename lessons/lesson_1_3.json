{
  "objective": "Learn to use assignment operators for efficient variable updates and the containment operator (`in`) to check for membership in sequences.",
  "blocks": [
    {
      "type": "text",
      "content": "# Assignment & Containment Operators\n\n### Objective:\nLearn to use assignment operators for efficient variable updates and the containment operator (`in`) to check for membership in sequences."
    },
    {
      "type": "text",
      "content": "## Introduction: More Ways to Interact with Data\n\nIn previous lessons, we explored basic data types, expressions, and fundamental operations. Now, we'll dive into two powerful sets of operators that streamline your code and make it more readable: **Assignment Operators** and the **Containment Operator (`in`)**.\n\nAssignment operators provide a concise way to perform an operation and then assign the result back to the original variable. The `in` operator allows you to easily check if a specific value exists within a sequence (like a string or a list), which is incredibly useful for searching and conditional logic."
    },
    {
      "type": "text",
      "content": "## 1. Assignment Operators\n\n**Concept:**\nAssignment operators are shortcuts that combine an arithmetic or bitwise operation with an assignment. Instead of writing `x = x + 5`, you can simply write `x += 5`. This makes your code more compact and often easier to read, especially for frequent updates to a variable.\n\n**Common Assignment Operators:**\n\n- `+=` (Add AND assignment): `x += y` is equivalent to `x = x + y`\n- `-=` (Subtract AND assignment): `x -= y` is equivalent to `x = x - y`\n- `*=` (Multiply AND assignment): `x *= y` is equivalent to `x = x * y`\n- `/=` (Divide AND assignment): `x /= y` is equivalent to `x = x / y`\n- `//=` (Floor Divide AND assignment): `x //= y` is equivalent to `x = x // y`\n- `%=` (Modulo AND assignment): `x %= y` is equivalent to `x = x % y`\n- `**=` (Exponentiate AND assignment): `x **= y` is equivalent to `x = x ** y`\n\nThese operators work for numbers and, in some cases, for strings (e.g., `+=` for string concatenation)."
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "# Examples of Assignment Operators:\n\n# Add AND assignment (+=)\npoints = 100\nprint(f'Initial points: {points}') # Output: Initial points: 100\npoints += 50 # Same as: points = points + 50\nprint(f'Points after bonus: {points}') # Output: Points after bonus: 150\n\n# Subtract AND assignment (-=)\nhealth = 100\nprint(f'Initial health: {health}') # Output: Initial health: 100\nhealth -= 25 # Same as: health = health - 25\nprint(f'Health after damage: {health}') # Output: Health after damage: 75\n\n# Multiply AND assignment (*=)\ncost = 5\nprint(f'Initial cost: {cost}') # Output: Initial cost: 5\ncost *= 3 # Same as: cost = cost * 3\nprint(f'Cost after quantity: {cost}') # Output: Cost after quantity: 15\n\n# Divide AND assignment (/=)\nbalance = 200\nprint(f'Initial balance: {balance}') # Output: Initial balance: 200\nbalance /= 4 # Same as: balance = balance / 4\nprint(f'Balance per person: {balance}') # Output: Balance per person: 50.0\n\n# Floor Divide AND assignment (//=)\nitems_per_box = 17\nboxes = 5\nprint(f'Initial items: {items_per_box}') # Output: Initial items: 17\nitems_per_box //= boxes # Same as: items_per_box = items_per_box // boxes\nprint(f'Items per box after division: {items_per_box}') # Output: Items per box after division: 3\n\n# Modulo AND assignment (%=)\nremainder = 25\nprint(f'Initial remainder: {remainder}') # Output: Initial remainder: 25\nremainder %= 7 # Same as: remainder = remainder % 7\nprint(f'Remainder after modulo: {remainder}') # Output: Remainder after modulo: 4\n\n# Exponentiate AND assignment (**=)\nbase = 2\nprint(f'Initial base: {base}') # Output: Initial base: 2\nbase **= 3 # Same as: base = base ** 3\nprint(f'Base after exponentiation: {base}') # Output: Base after exponentiation: 8\n\n# String concatenation with +=\nmessage = 'Hello'\nprint(f'Initial message: {message}') # Output: Initial message: Hello\nmessage += ' World!'\nprint(f'Message after concatenation: {message}') # Output: Message after concatenation: Hello World!"
    },
    {
      "type": "ide",
      "id": "try_assignment_operators",
      "label": "Try it yourself: Practice with Assignment Operators!",
      "editable": true,
      "default_code": "# Start with a variable, then update it using different assignment operators.\n# Example:\n# score = 0\n# score += 10\n# print(score)\n# energy = 100\n# energy -= 20\n# print(energy)\n"
    },
    {
      "type": "text",
      "content": "## 2. Containment Operator (`in`)\n\n**Concept:**\nThe `in` operator is used to test for membership in sequences (strings, lists, tuples, sets, dictionaries, etc.). It returns `True` if the specified value is found in the sequence, and `False` otherwise. It's incredibly useful for checking if an item exists without iterating through the entire sequence manually.\n\nThere's also a `not in` operator, which does the opposite: it returns `True` if the value is *not* found in the sequence."
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "# Examples of the Containment Operator (`in`):\n\n# Checking membership in a string\nword = \"Python Programming\"\nprint('Python' in word) # Output: True\nprint('Java' in word)   # Output: False\nprint('pro' in word)   # Output: False (case-sensitive)\n\n# Checking membership in a list\nfruits = ['apple', 'banana', 'cherry', 'grape']\nprint('banana' in fruits) # Output: True\nprint('kiwi' in fruits)     # Output: False\n\n# Using 'not in'\nmy_sentence = \"The quick brown fox\"\nprint('lazy' not in my_sentence) # Output: True\n\nnumbers = [1, 2, 3, 4, 5]\nprint(6 not in numbers)     # Output: True"
    },
    {
      "type": "ide",
      "id": "try_in_operator",
      "label": "Try it yourself: Use the `in` operator!",
      "editable": true,
      "default_code": "# Create a list of animals or a sentence, and check for membership.\n# Example:\n# animals = ['cat', 'dog', 'bird']\n# print('dog' in animals)\n# text = 'Learning Python is fun'\n# print('fun' in text)\n"
    },
    {
      "type": "text",
      "content": "## Recap:\n\nNow you're equipped with more powerful tools for managing and querying your data in Python:\n\n- **Assignment Operators:** Concise ways to update variables (e.g., `+=`, `-=`, `*=`, `/=`). They combine an operation with an assignment, making your code cleaner.\n- **Containment Operator (`in`):** Used to check if an element is present within a sequence (like a string or a list). This is crucial for conditional checks and data validation."
    },
    {
      "type": "quiz_section",
      "id": "lesson_1_3_quiz",
      "content": {
        "progress": {
          "total": 5,
          "completed": 0
        },
        "header": "Test your knowledge of Assignment and Containment Operators!",
        "blocks": [
          {
            "type": "fill_in_the_blanks",
            "id": "quiz_assignment_operators",
            "instructions": "Part 1: Evaluate the result after the assignment operator.",
            "questions": [
              { "text": "If `x = 10` and `x += 5`, what is the new value of `x`? _________. <span class='points-badge'>1 pt</span>", "answers": ["15"] },
              { "text": "If `message = \"Hello\"` and `message += \" World\"`, what is the new value of `message`? _________. <span class='points-badge'>1 pt</span>", "answers": ["Hello World"] },
              { "text": "If `y = 20` and `y /= 4`, what is the new value of `y`? _________. <span class='points-badge'>1 pt</span>", "answers": ["5.0"] },
              { "text": "If `count = 7` and `count %= 3`, what is the new value of `count`? _________. <span class='points-badge'>1 pt</span>", "answers": ["1"] }
            ]
          },
          {
            "type": "multiple_choice_quiz",
            "id": "quiz_containment_operator",
            "instructions": "Part 2: Multiple Choice - Containment Operator",
            "questions": [
              {
                "question": "What is the result of `'apple' in ['banana', 'apple', 'cherry']`? <span class='points-badge'>1 pt</span>",
                "options": ["`True`", "`False`", "Error", "`'apple'`"],
                "correct_index": 0
              },
              {
                "question": "What is the result of `'xyz' not in 'abcdefg'`? <span class='points-badge'>1 pt</span>",
                "options": ["`True`", "`False`", "Error", "`'abcdefg'`"],
                "correct_index": 0
              },
              {
                "question": "Which operator is used to check if a value is present in a sequence? <span class='points-badge'>1 pt</span>",
                "options": ["`=`", "`==`", "`in`", "`+`"],
                "correct_index": 2
              }
            ]
          }
        ]
      }
    },
    {
      "type": "debug_challenge",
      "id": "fix_in_operator",
      "label": "**Fix the bug!**",
      "buggy_code": "my_list = [10, 20, 30]\nif 10 == my_list:\n    print(\"10 is in the list\")\nelse:\n    print(\"10 is not in the list\")",
      "solution": {
        "explanation": "The original code uses `==` which checks if `10` is *equal* to the entire list `[10, 20, 30]`, which is `False`. To check if `10` is an *element* within the list, you should use the `in` operator.",
        "correct_code": "my_list = [10, 20, 30]\nif 10 in my_list:\n    print(\"10 is in the list\")\nelse:\n    print(\"10 is not in the list\")"
      }
    }
  ]
}
