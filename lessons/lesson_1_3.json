{
  "objective": "Master assignment, containment (`in`), identity (`is`), and unary operators for efficient variable manipulation, sequence checking, object comparison, and concise data transformations.",
  "blocks": [
    {
      "type": "text",
      "content": "# Assignment, Containment, Identity, & Unary Operators\n\n### Objective:\nMaster assignment, containment (`in`), identity (`is`), and unary operators for efficient variable manipulation, sequence checking, object comparison, and concise data transformations."
    },
    {
      "type": "text",
      "content": "## Introduction: More Ways to Interact with Data\n\nIn previous lessons, we explored basic data types, expressions, and fundamental operations. Now, we'll dive into powerful sets of operators that streamline your code and make it more readable: **Assignment Operators**, the **Containment Operator (`in`)**, the **Identity Operator (`is`)**, and **Unary Operators**.\n\n**Assignment operators** provide a concise way to perform an operation and then assign the result back to the original variable. The `in` operator allows you to easily check if a specific value exists within a sequence (like a string or a list), which is incredibly useful for searching and conditional logic. The `is` operator helps us understand if two variables refer to the *exact same object* in memory, a crucial concept for understanding Python's object model. Finally, **Unary operators** perform an action on a single operand, simplifying certain common operations."
    },
    {
      "type": "text",
      "content": "## 1. Assignment Operators\n\n**Concept:**\nAssignment operators are shortcuts that combine an arithmetic or bitwise operation with an assignment. Instead of writing `x = x + 5`, you can simply write `x += 5`. This makes your code more compact and often easier to read, especially for frequent updates to a variable.\n\n"
    },
    {
      "type": "text",
      "content": "### Common Assignment Operators:\n\n- `+=` (Add AND assignment): `x += y` is equivalent to `x = x + y`"
    },
    {
      "type": "step_card",
      "id": "lesson1_3_snippet1",
      "header": "Add AND Assignment (`+=`)",
      "steps": [
        "Initial value of `points` is 100.",
        "`points += 50` means `points = points + 50`.",
        "The new value of `points` becomes 150."
      ],
      "code": "points = 100\npoints += 50\nprint('Points after bonus:', points)",
      "output": "Points after bonus: 150"
    },
    {
      "type": "text",
      "content": "- `-=` (Subtract AND assignment): `x -= y` is equivalent to `x = x - y`"
    },
    {
      "type": "step_card",
      "id": "lesson1_3_snippet2",
      "header": "Subtract AND Assignment (`-=`)",
      "steps": [
        "Initial value of `health` is 100.",
        "`health -= 25` means `health = health - 25`.",
        "The new value of `health` becomes 75."
      ],
      "code": "health = 100\nhealth -= 25\nprint('Health after damage:', health)",
      "output": "Health after damage: 75"
    },
    {
      "type": "text",
      "content": "- `*=` (Multiply AND assignment): `x *= y` is equivalent to `x = x * y`"
    },
    {
      "type": "step_card",
      "id": "lesson1_3_snippet3",
      "header": "Multiply AND Assignment (`*=`)",
      "steps": [
        "Initial value of `cost` is 5.",
        "`cost *= 3` means `cost = cost * 3`.",
        "The new value of `cost` becomes 15."
      ],
      "code": "cost = 5\ncost *= 3\nprint('Cost after quantity:', cost)",
      "output": "Cost after quantity: 15"
    },
    {
      "type": "text",
      "content": "- `/=` (Divide AND assignment): `x /= y` is equivalent to `x = x / y`"
    },
    {
      "type": "step_card",
      "id": "lesson1_3_snippet4",
      "header": "Divide AND Assignment (`/=`)",
      "steps": [
        "Initial value of `balance` is 200.",
        "`balance /= 4` means `balance = balance / 4`.",
        "The new value of `balance` becomes 50.0 (float)."
      ],
      "code": "balance = 200\nbalance /= 4\nprint('Balance per person:', balance)",
      "output": "Balance per person: 50.0"
    },
    {
      "type": "text",
      "content": "- `//=` (Floor Divide AND assignment): `x //= y` is equivalent to `x = x // y`"
    },
    {
      "type": "step_card",
      "id": "lesson1_3_snippet5",
      "header": "Floor Divide AND Assignment (`//=`)",
      "steps": [
        "Initial value of `items_per_box` is 17.",
        "`items_per_box //= 5` means `items_per_box = items_per_box // 5` (integer division).",
        "The new value of `items_per_box` becomes 3 (17 divided by 5 is 3 with remainder)."
      ],
      "code": "items_per_box = 17\nboxes = 5\nitems_per_box //= boxes\nprint('Items per box after division:', items_per_box)",
      "output": "Items per box after division: 3"
    },
    {
      "type": "text",
      "content": "- `%=` (Modulo AND assignment): `x %= y` is equivalent to `x = x % y`"
    },
    {
      "type": "step_card",
      "id": "lesson1_3_snippet6",
      "header": "Modulo AND Assignment (`%=`)",
      "steps": [
        "Initial value of `remainder` is 25.",
        "`remainder %= 7` means `remainder = remainder % 7` (gets the remainder).",
        "The new value of `remainder` becomes 4 (25 divided by 7 is 3 with a remainder of 4)."
      ],
      "code": "remainder = 25\nremainder %= 7\nprint('Remainder after modulo:', remainder)",
      "output": "Remainder after modulo: 4"
    },
    {
      "type": "text",
      "content": "- `**=` (Exponentiate AND assignment): `x **= y` is equivalent to `x = x ** y`"
    },
    {
      "type": "step_card",
      "id": "lesson1_3_snippet7",
      "header": "Exponentiate AND Assignment (`**=`)",
      "steps": [
        "Initial value of `base` is 2.",
        "`base **= 3` means `base = base ** 3` (2 to the power of 3).",
        "The new value of `base` becomes 8."
      ],
      "code": "base = 2\nbase **= 3\nprint('Base after exponentiation:', base)",
      "output": "Base after exponentiation: 8"
    },
    {
      "type": "text",
      "content": "- `+=` (String Concatenation AND assignment): `x += y` is equivalent to `x = x + y` (for strings)"
    },
    {
      "type": "step_card",
      "id": "lesson1_3_snippet8",
      "header": "String Concatenation with `+=`",
      "steps": [
        "Initial value of `message` is \"Hello\".",
        "`message += \" World!\"` means `message = message + \" World!\"`.",
        "The new value of `message` becomes \"Hello World!\"."
      ],
      "code": "message = 'Hello'\nmessage += ' World!'\nprint('Message after concatenation:', message)",
      "output": "Message after concatenation: Hello World!"
    },
    {
      "type": "ide",
      "id": "try_assignment_operators",
      "label": "Try it yourself: Practice with Assignment Operators!",
      "editable": true,
      "default_code": "# Start with a variable, then update it using different assignment operators.\n# Example:\n# score = 0\n# score += 10\n# print(score)\n# energy = 100\n# energy -= 20\n# print(energy)\n"
    },
    {
      "type": "text",
      "content": "## 2. Containment Operator (`in`)\n\n**Concept:**\nThe `in` operator is used to test for membership in sequences (strings, lists, tuples, sets, dictionaries, etc.). It returns `True` if the specified value is found in the sequence, and `False` otherwise. It's incredibly useful for checking if an item exists without iterating through the entire sequence manually.\n\nThere's also a `not in` operator, which does the opposite: it returns `True` if the value is *not* found in the sequence."
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "# Examples of the Containment Operator (`in`):\n\n# Checking membership in a string\nword = \"Python Programming\"\nprint('Python' in word) # Output: True\nprint('Java' in word)   # Output: False\nprint('pro' in word)   # Output: False (case-sensitive)\n\n# Checking membership in a list\nfruits = ['apple', 'banana', 'cherry', 'grape']\nprint('banana' in fruits) # Output: True\nprint('kiwi' in fruits)     # Output: False\n\n# Using 'not in'\nmy_sentence = \"The quick brown fox\"\nprint('lazy' not in my_sentence) # Output: True\n\nnumbers = [1, 2, 3, 4, 5]\nprint(6 not in numbers)     # Output: True",
      "id": "lesson1_3_snippet9"
    },
    {
      "type": "ide",
      "id": "try_in_operator",
      "label": "Try it yourself: Use the `in` operator!",
      "editable": true,
      "default_code": "# Create a list of animals or a sentence, and check for membership.\n# Example:\n# animals = ['cat', 'dog', 'bird']\n# print('dog' in animals)\n# text = 'Learning Python is fun'\n# print('fun' in text)\n"
    },
    {
      "type": "text",
      "content": "## 3. Identity Operator (`is`)\n\n**Concept:**\nWhile `==` (equality operator) checks if two variables have the same *value*, the `is` operator checks if two variables refer to the *exact same object in memory*. This is a subtle but important distinction, especially when dealing with mutable objects like lists.\n\nIf two variables point to the same memory location, `is` will return `True`. Otherwise, it returns `False`. The `is not` operator works similarly, returning `True` if they do *not* refer to the same object.\n\n**When to use `is` vs. `==`?**\n- Use `==` when you want to compare the *values* of two objects.\n- Use `is` when you want to check if two variables are actually the *same object* in memory. A common use case is checking if a variable is `None` (e.g., `if my_var is None:`).\n\n**Important Note on Small Integers and Strings:** For optimization purposes, Python sometimes 'interns' small integers (typically from -5 to 256) and short strings. This means that multiple variables with the same small integer or short string value might actually point to the same object in memory, leading `is` to return `True`. However, this is an implementation detail and should not be relied upon for general value comparisons. Always use `==` for value comparison unless you specifically need to check for object identity."
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "# Examples of the Identity Operator (`is`):\n\n# Comparing mutable objects (lists)\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3] # list2 is a *new* list, even with same values\nlist3 = list1     # list3 refers to the *same* object as list1\n\nprint('list1 == list2:', list1 == list2) # Output: True (values are equal)\nprint('list1 is list2:', list1 is list2) # Output: False (different objects)\nprint('list1 is list3:', list1 is list3) # Output: True (same object)\n\n# Checking for None (a common use case for 'is')\nmy_variable = None\nif my_variable is None:\n    print(\"my_variable is indeed None\") # Output: my_variable is indeed None\n\nanother_variable = 0\nif another_variable is not None:\n    print(\"another_variable is not None\") # Output: another_variable is not None\n\n# Integer interning example (implementation dependent for larger numbers)\na = 10\nb = 10\nprint('a is b for 10:', a is b) # Output: True (often True for small integers)\n\nc = 1000\nd = 1000\nprint('c is d for 1000:', c is d) # Output: False (often False for larger integers)\n\n# String interning example (implementation dependent for longer strings)\nstr1 = \"hello\"\nstr2 = \"hello\"\nprint('str1 is str2 for \"hello\":', str1 is str2) # Output: True (often True for short strings)\n\nlong_str1 = \"This is a somewhat longer string\"\nlong_str2 = \"This is a somewhat longer string\"\nprint('long_str1 is long_str2:', long_str1 is long_str2) # Output: False (often False for longer strings)\n",
      "id": "lesson1_3_snippet10"
    },
    {
      "type": "ide",
      "id": "try_is_operator",
      "label": "Try it yourself: Explore the `is` operator!",
      "editable": true,
      "default_code": "# Create some variables, including lists, and experiment with 'is' and '=='\n# Example:\n# item_a = [1, 2]\n# item_b = item_a\n# item_c = [1, 2]\n# print(item_a is item_b)\n# print(item_a is item_c)\n# print(item_a == item_c)\n"
    },
    {
      "type": "text",
      "content": "## 4. Unary Operators\n\n**Concept:**\nUnary operators are operators that act on a single operand. You've likely seen them before, even if you didn't know their formal name. They are used to perform operations like negation, positive sign, or bitwise NOT.\n\n**Common Unary Operators:**\n\n- `+` (Unary Plus): Returns the operand's value unchanged. Rarely used explicitly, as numbers are positive by default, but it can make intent clearer.\n- `-` (Unary Minus): Negates the operand's value.\n- `~` (Bitwise NOT): Inverts the bits of the operand. This is primarily used in low-level bitwise operations and will be covered in more detail in advanced topics.\n- `not` (Logical NOT): Inverts the boolean value of the operand. If the operand is `True`, it returns `False`, and vice-versa. (This is a logical operator, but it's unary because it operates on a single boolean operand)."
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "# Examples of Unary Operators:\n\n# Unary Plus (+)\nnum_pos = 5\nresult_pos = +num_pos\nprint('Unary Plus of', num_pos, ':', result_pos) # Output: Unary Plus of 5: 5\n\nnum_neg = -10\nresult_neg_plus = +num_neg\nprint('Unary Plus of', num_neg, ':', result_neg_plus) # Output: Unary Plus of -10: -10\n\n# Unary Minus (-)\nvalue = 25\nnegated_value = -value\nprint('Negated value of', value, ':', negated_value) # Output: Negated value of 25: -25\n\nneg_value_again = -negated_value\nprint('Negated value of', negated_value, ':', neg_value_again) # Output: Negated value of -25: 25\n\n# Logical NOT (not)\nis_active = True\nprint('Not is_active:', not is_active) # Output: Not is_active: False\n\nis_empty = [] # An empty list is considered False in a boolean context\nprint('Not is_empty:', not is_empty) # Output: Not is_empty: True\n\n# Bitwise NOT (~)\n# This operator works on the binary representation of numbers.\n# For integers, Python's ~ operator is equivalent to -(x + 1).\nnum_bitwise = 5  # Binary: 000...0101\nprint('Bitwise NOT of', num_bitwise, ':', ~num_bitwise) # Output: Bitwise NOT of 5: -6\n\nnum_bitwise_neg = -6 # Binary for -6 in two's complement...\nprint('Bitwise NOT of', num_bitwise_neg, ':', ~num_bitwise_neg) # Output: Bitwise NOT of -6: 5\n",
      "id": "lesson1_3_snippet11"
    },
    {
      "type": "ide",
      "id": "try_unary_operators",
      "label": "Try it yourself: Experiment with Unary Operators!",
      "editable": true,
      "default_code": "# Try applying unary operators to different numbers and boolean values.\n# Example:\n# temperature = -5\n# print(+temperature)\n# is_raining = False\n# print(not is_raining)\n"
    },
    {
      "type": "text",
      "content": "## 5. Operator Precedence and Associativity\n\n**Concept:**\nWhen you combine multiple operators in a single expression, Python follows specific rules to determine the order of evaluation. These rules are called **operator precedence** and **associativity**.\n\n- **Precedence:** Determines which operator is evaluated first. Operators with higher precedence are evaluated before operators with lower precedence (e.g., multiplication `*` has higher precedence than addition `+`).\n- **Associativity:** Determines the order of evaluation when two operators have the *same* precedence. Most operators are left-to-right associative (e.g., `a - b - c` is evaluated as `(a - b) - c`), while some are right-to-left (e.g., exponentiation `**` is `a ** b ** c` evaluated as `a ** (b ** c)`).\n\nIt's crucial to understand precedence to avoid unexpected results. When in doubt, use parentheses `()` to explicitly define the order of operations, as parentheses always have the highest precedence.\n\n### General Order of Precedence (Highest to Lowest, simplified):\n\n1.  **Parentheses `()`:** Explicit grouping.\n2.  **Exponentiation `**`**\n3.  **Unary Operators `+x`, `-x`, `~x`, `not x`** (Note: `not` has lower precedence than non-arithmetic unary operators, but is still very high within logical operations).\n4.  **Multiplication, Division, Floor Division, Modulo `*`, `/`, `//`, `%`** (Evaluated left-to-right)\n5.  **Addition, Subtraction `+`, `-`** (Evaluated left-to-right)\n6.  **Comparison Operators `==`, `!=`, `<`, `>`, `<=`, `>=`**\n7.  **Identity Operators `is`, `is not`**\n8.  **Containment Operators `in`, `not in`**\n9.  **Logical `and`**\n10. **Logical `or`**\n11. **Assignment Operators `=`, `+=`, `-=`, etc.** (Lowest precedence; the right-hand side is fully evaluated first, then the assignment occurs).\n"
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "# Examples of Operator Precedence and Associativity:\n\n# Precedence: Multiplication before Addition\nresult1 = 10 + 5 * 2\n# Evaluates as: 10 + (5 * 2) = 10 + 10 = 20\nprint('10 + 5 * 2 =', result1) # Output: 20\n\n# Using parentheses to override precedence\nresult2 = (10 + 5) * 2\n# Evaluates as: (15) * 2 = 30\nprint('(10 + 5) * 2 =', result2) # Output: 30\n\n# Associativity: Left-to-right for Addition/Subtraction\nresult3 = 20 - 5 + 3\n# Evaluates as: (20 - 5) + 3 = 15 + 3 = 18\nprint('20 - 5 + 3 =', result3) # Output: 18\n\n# Associativity: Right-to-left for Exponentiation\nresult4 = 2 ** 3 ** 2\n# Evaluates as: 2 ** (3 ** 2) = 2 ** 9 = 512\nprint('2 ** 3 ** 2 =', result4) # Output: 512\n\n# Precedence with logical operators: 'not' > 'and' > 'or'\nis_admin = True\nis_editor = False\nis_guest = True\n\n# Example: not is_editor and is_admin\n# Evaluates as: (not is_editor) and is_admin => (True) and True => True\naccess1 = not is_editor and is_admin\nprint('Access 1 (not editor and admin):', access1) # Output: True\n\n# Example: is_admin or is_editor and is_guest\n# Evaluates as: is_admin or (is_editor and is_guest)\n# => True or (False and True) => True or False => True\naccess2 = is_admin or is_editor and is_guest\nprint('Access 2 (admin or editor and guest):', access2) # Output: True\n\n# Using parentheses to clarify or change order\naccess3 = (is_admin or is_editor) and is_guest\n# Evaluates as: (True or False) and True => True and True => True\nprint('Access 3 ((admin or editor) and guest):', access3) # Output: True\n",
      "id": "lesson1_3_snippet12"
    },
    {
      "type": "ide",
      "id": "try_precedence",
      "label": "Challenge: Predict and test operator precedence!",
      "editable": true,
      "default_code": "# Predict the output of these expressions, then run the code to check.\n# What is the value of 'x' and 'y'?\n# x = 10 + 4 / 2\n# y = 15 % 4 * 2\n# print(x)\n# print(y)\n\n# Now, try to change the order using parentheses.\n# z = (10 + 4) / 2\n# print(z)\n"
    },
    {
      "type": "text",
      "content": "## Recap:\n\nNow you're equipped with even more powerful tools for managing and querying your data in Python:\n\n- **Assignment Operators:** Concise ways to update variables (e.g., `+=`, `-=`, `*=`, `/=`). They combine an operation with an assignment, making your code cleaner.\n- **Containment Operator (`in`):** Used to check if an element is present within a sequence (like a string or a list). This is crucial for conditional checks and data validation.\n- **Identity Operator (`is`):** Used to check if two variables refer to the exact same object in memory, distinct from comparing their values (`==`).\n- **Unary Operators:** Operators that act on a single operand (e.g., `+`, `-`, `~`, `not`).\n- **Operator Precedence & Associativity:** Rules that determine the order of operations in complex expressions. Use parentheses `()` to explicitly control evaluation order."
    },
    {
      "type": "quiz",
      "id": "lesson_1_3_quiz",
      "title": "Test your knowledge of Assignment, Containment, Identity, and Unary Operators!",
      "instructions": "Complete all questions in this section.",
      "passing_score": 70,
      "retake_cost": 10,
      "show_progress": true,
      "questions": [
        {
          "type": "fill_in_the_blank",
          "id": "quiz_assignment_operators",
          "question": "",
          "answers": [],
          "points": 1,
          "case_sensitive": false,
          "explanation": ""
        },
        {
          "type": "multiple_choice",
          "id": "mcq_quiz_containment_operator_0",
          "question": "What is the result of `'apple' in ['banana', 'apple', 'cherry']`? <span class='points-badge'>1 pt</span>",
          "options": [
            "`True`",
            "`False`",
            "Error",
            "`'apple'`"
          ],
          "correct_index": 0,
          "points": 1,
          "explanation": ""
        },
        {
          "type": "multiple_choice",
          "id": "mcq_quiz_containment_operator_1",
          "question": "What is the result of `'xyz' not in 'abcdefg'`? <span class='points-badge'>1 pt</span>",
          "options": [
            "`True`",
            "`False`",
            "Error",
            "`'abcdefg'`"
          ],
          "correct_index": 0,
          "points": 1,
          "explanation": ""
        },
        {
          "type": "multiple_choice",
          "id": "mcq_quiz_containment_operator_2",
          "question": "Which operator is used to check if a value is present in a sequence? <span class='points-badge'>1 pt</span>",
          "options": [
            "`=`",
            "`==`",
            "`in`",
            "`+`"
          ],
          "correct_index": 2,
          "points": 1,
          "explanation": ""
        },
        {
          "type": "multiple_choice",
          "id": "mcq_quiz_identity_unary_precedence_0",
          "question": "Given `list_a = [1, 2]` and `list_b = list_a`, what is the result of `list_a is list_b`? <span class='points-badge'>1 pt</span>",
          "options": [
            "`True`",
            "`False`",
            "Error",
            "Depends on Python version"
          ],
          "correct_index": 0,
          "points": 1,
          "explanation": ""
        },
        {
          "type": "multiple_choice",
          "id": "mcq_quiz_identity_unary_precedence_1",
          "question": "What is the result of `not (5 > 10)`? <span class='points-badge'>1 pt</span>",
          "options": [
            "`True`",
            "`False`",
            "Error",
            "None"
          ],
          "correct_index": 0,
          "points": 1,
          "explanation": ""
        },
        {
          "type": "multiple_choice",
          "id": "mcq_quiz_identity_unary_precedence_2",
          "question": "What is the value of `result = 10 - 2 * 3` due to operator precedence? <span class='points-badge'>1 pt</span>",
          "options": [
            "24",
            "4",
            "Error",
            "10"
          ],
          "correct_index": 1,
          "points": 1,
          "explanation": ""
        }
      ],
      "total_points": 7
    },
    {
      "type": "debug_challenge",
      "id": "fix_in_operator",
      "label": "**Fix the bug!**",
      "buggy_code": "my_list = [10, 20, 30]\nif 10 == my_list:\n    print(\"10 is in the list\")\nelse:\n    print(\"10 is not in the list\")",
      "solution": {
        "explanation": "The original code uses `==` which checks if `10` is *equal* to the entire list `[10, 20, 30]`, which is `False`. To check if `10` is an *element* within the list, you should use the `in` operator.",
        "correct_code": "my_list = [10, 20, 30]\nif 10 in my_list:\n    print(\"10 is in the list\")\nelse:\n    print(\"10 is not in the list\")"
      }
    },
    {
      "type": "debug_challenge",
      "id": "fix_is_operator_misuse",
      "label": "**Another bug to fix!**",
      "buggy_code": "num1 = 500\nnum2 = 500\nif num1 is num2:\n    print(\"Numbers are the same object\")\nelse:\n    print(\"Numbers are different objects\")\n\n# Expected: \"Numbers are different objects\" (or True for small integers due to interning, but False for larger integers)\n# Problem: The 'is' operator is used, but for value comparison, '==' is more appropriate and reliable.",
      "solution": {
        "explanation": "The `is` operator checks for object identity (same memory location). While it might sometimes return `True` for small integers or interned strings due to Python's optimizations, it's not reliable for general value comparison, especially with larger numbers or newly created objects. For checking if two variables have the same value, the `==` (equality) operator should be used.",
        "correct_code": "num1 = 500\nnum2 = 500\nif num1 == num2:\n    print(\"Numbers have the same value\")\nelse:\n    print(\"Numbers have different values\")"
      }
    }
  ],
  "migration_info": {
    "quiz_master_3_migration": {
      "migrated_on": "2025-06-27T18:00:24.018289",
      "original_backup": "lesson_1_3.json.backup_20250627_180024",
      "blocks_processed": 36,
      "blocks_after_migration": 36
    }
  }
}