{
  "objective": "Understand and apply branching statements (if, elif, else) and compound conditional expressions for flow control.",
  "blocks": [
    {
      "type": "text",
      "content": "# Lesson 1: Flow Control with Decisions\n\n### Objective:\nUnderstand and apply branching statements (if, elif, else) and compound conditional expressions for flow control."
    },
    {
      "type": "text",
      "content": "Welcome to the first lesson on Flow Control! In programming, **flow control** refers to the order in which individual statements or instructions are executed. Decision-making statements allow your program to execute different blocks of code based on whether a specified condition is true or false."
    },
    {
      "type": "text",
      "content": "## 2.1 Construct and Analyze Code Segments that Use Branching Statements\n\nBranching statements, also known as **conditional statements**, are fundamental for creating dynamic and responsive programs. They allow your code to \"branch\" into different paths of execution."
    },
    {
      "type": "text",
      "content": "### The `if` Statement\n\nThe `if` statement is the most basic conditional statement. It executes a block of code only if a specified condition is true.\n\n**Syntax:**\n\n```python\nif condition:\n    # Code to execute if the condition is true\n```"
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "age = 20\n\nif age >= 18:\n    print(\"You are old enough to vote.\")\n",
      "id": "lesson2_1_snippet1"
    },
    {
      "type": "text",
      "content": "**Explanation:**\nThe condition (e.g., age >= 18) is evaluated. If it's True, the indented code block below the if statement is executed."
    },
    {
      "type": "text",
      "content": "### The `if-else` Statement\n\nThe `if-else` statement allows you to execute one block of code if a condition is true, and a different block of code if the condition is false.\n\n**Syntax:**\n\n```python\nif condition:\n    # Code to execute if the condition is true\nelse:\n    # Code to execute if the condition is false\n```"
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "temperature = 25\n\nif temperature > 30:\n    print(\"It's a hot day!\")\nelse:\n    print(\"It's not too hot today.\")\n",
      "id": "lesson2_1_snippet2"
    },
    {
      "type": "text",
      "content": "**Explanation:**\nIf temperature > 30 is True, the first print statement runs. Otherwise, the else block is executed."
    },
    {
      "type": "text",
      "content": "### The `if-elif-else` Statement\n\nWhen you have multiple conditions to check, the `if-elif-else` (short for \"else if\") statement is very useful. It allows you to test several conditions sequentially.\n\n**Syntax:**\n\n```python\nif condition1:\n    # Code to execute if condition1 is true\nelif condition2:\n    # Code to execute if condition1 is false AND condition2 is true\nelif condition3:\n    # Code to execute if condition1 and condition2 are false AND condition3 is true\nelse:\n    # Code to execute if none of the above conditions are true\n```"
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "score = 85\n\nif score >= 90:\n    print(\"Grade: A\")\nelif score >= 80:\n    print(\"Grade: B\")\nelif score >= 70:\n    print(\"Grade: C\")\nelse:\n    print(\"Grade: F\")\n",
      "id": "lesson2_1_snippet3"
    },
    {
      "type": "text",
      "content": "**Explanation:**\nThe conditions are checked in order. As soon as a condition evaluates to True, its corresponding code block is executed, and the rest of the elif and else blocks are skipped."
    },
    {
      "type": "text",
      "content": "### Nested Conditional Expressions\n\nYou can place conditional statements inside other conditional statements. This is known as **nesting** and allows for more complex decision logic.\n\n**Syntax:**\n\n```python\nif outer_condition:\n    # Code for outer condition true\n    if inner_condition:\n        # Code for both outer and inner conditions true\n    else:\n        # Code for outer condition true, inner condition false\nelse:\n    # Code for outer condition false\n```"
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "weather = \"rainy\"\nhas_umbrella = True\n\nif weather == \"rainy\":\n    if has_umbrella:\n        print(\"Great! You can go outside.\")\n    else:\n        print(\"Better stay inside or find an umbrella.\")\nelse:\n    print(\"Enjoy the lovely weather!\")\n",
      "id": "lesson2_1_snippet4"
    },
    {
      "type": "text",
      "content": "**Explanation:**\nThe program first checks if it's rainy. If it is, it then checks if has_umbrella is True. This allows for highly specific outcomes based on multiple factors."
    },
    {
      "type": "text",
      "content": "### Compound Conditional Expressions\n\nYou can combine multiple conditions using **logical operators**: and, or, and not.\n\n* **and**: Returns True if both conditions are True.\n* **or**: Returns True if at least one condition is True.\n* **not**: Inverts the boolean value of a condition.\n\n**Syntax:**\n\n```python\nif condition1 and condition2:\n    # Code if both are true\n\nif condition1 or condition2:\n    # Code if at least one is true\n\nif not condition:\n    # Code if condition is false\n```"
    },
    {
      "type": "code_snippet",
      "language": "python",
      "code": "age = 25\nhas_license = True\n\n# Using 'and'\nif age >= 18 and has_license:\n    print(\"You are eligible to drive.\")\n\n# Using 'or'\nday = \"Saturday\"\nis_holiday = False\n\nif day == \"Saturday\" or day == \"Sunday\" or is_holiday:\n    print(\"It's a weekend or a holiday!\")\n\n# Using 'not'\nis_sunny = False\n\nif not is_sunny:\n    print(\"It might be cloudy or rainy.\")\n",
      "id": "lesson2_1_snippet5"
    },
    {
      "type": "text",
      "content": "**Explanation:**\nCompound conditions allow you to write more concise and powerful decision logic without excessive nesting."
    },
    {
      "type": "ide",
      "id": "try_decision_logic",
      "label": "Try it yourself: Practice with Decision Logic!",
      "editable": true,
      "default_code": "# Create a scenario where you use an if-elif-else structure.\n# Example:\n# temperature = 15\n# if temperature < 10:\n#     print(\"It's cold!\")\n# elif temperature >= 10 and temperature < 25:\n#     print(\"It's mild.\")\n# else:\n#     print(\"It's hot!\")\n"
    },
    {
      "type": "text",
      "content": "--- \n\n## Summary:\nIn this lesson, we've explored how to control the flow of your program using decision-making statements. You learned about if, if-else, if-elif-else for branching, how to nest these statements for complex logic, and how to combine conditions using logical operators (and, or, not). These tools are essential for making your programs intelligent and responsive to different situations."
    },
    {
      "type": "quiz_section",
      "id": "lesson_1_decision_quiz",
      "content": {
        "progress": {
          "total": 4,
          "completed": 0
        },
        "header": "Test your knowledge of Decision Statements!",
        "blocks": [
          {
            "type": "fill_in_the_blanks",
            "id": "quiz_conditional_output",
            "instructions": "Part 1: Predict the output of the following code snippets.",
            "questions": [
              {
                "text": "```python\nx = 10\nif x > 5:\n    print(\"A\")\nelse:\n    print(\"B\")\n```\nOutput: _________. <span class='points-badge'>1 pt</span>",
                "answers": [
                  "A"
                ]
              },
              {
                "text": "```python\nscore = 75\nif score >= 90:\n    print(\"Excellent\")\nelif score >= 70:\n    print(\"Good\")\nelse:\n    print(\"Pass\")\n```\nOutput: _________. <span class='points-badge'>1 pt</span>",
                "answers": [
                  "Good"
                ]
              }
            ]
          },
          {
            "type": "multiple_choice_quiz",
            "id": "quiz_logical_operators",
            "instructions": "Part 2: Multiple Choice - Logical Operators",
            "questions": [
              {
                "question": "Which operator returns `True` if *both* conditions are `True`? <span class='points-badge'>1 pt</span>",
                "options": [
                  "`or`",
                  "`not`",
                  "`and`",
                  "`equal`"
                ],
                "correct_index": 2
              },
              {
                "question": "What is the result of `(5 < 10) and (10 == 10)`? <span class='points-badge'>1 pt</span>",
                "options": [
                  "`True`",
                  "`False`",
                  "Error",
                  "`None`"
                ],
                "correct_index": 0
              }
            ]
          }
        ]
      }
    },
    {
      "type": "debug_challenge",
      "id": "fix_nested_conditional",
      "label": "**Fix the bug!**",
      "buggy_code": "is_logged_in = True\nhas_admin_rights = False\n\nif is_logged_in:\n    print(\"User is logged in.\")\n    if has_admin_rights:\n        print(\"Admin access granted.\")\n    print(\"Welcome!\") # This should only print if admin access is NOT granted and user IS logged in\nelse:\n    print(\"Please log in.\")",
      "solution": {
        "explanation": "The original code prints 'Welcome!' regardless of admin rights, as it's outside the inner `if-else` block. To make 'Welcome!' conditional on admin rights *not* being present (while logged in), it needs to be moved into the `else` block of the inner condition.",
        "correct_code": "is_logged_in = True\nhas_admin_rights = False\n\nif is_logged_in:\n    print(\"User is logged in.\")\n    if has_admin_rights:\n        print(\"Admin access granted.\")\n    else:\n        print(\"Welcome!\")\nelse:\n    print(\"Please log in.\")"
      }
    }
  ],
  "migration_info": {
    "quiz_master_3_migration": {
      "migrated_on": "2025-06-27T17:59:08.895183",
      "original_backup": "lesson_2_1.json.backup_20250627_175908",
      "blocks_processed": 22,
      "blocks_after_migration": 22
    }
  }
}