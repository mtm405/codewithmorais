console.log('🎪 DASHBOARD NUCLEAR - Loading simplified dashboard...'); window.DashboardNuclear = window.DashboardNuclear ||{initialized: false, currentChallengeIndex: 0, challenges: [], init(){if(this.initialized)return; if(!this.isDashboardPage())return; console.log('🎯 Initializing Nuclear Dashboard...'); this.initAnnouncements(); this.initLeaderboard(); this.initDailyChallenges(); this.initNotifications(); this.initialized = true; console.log('✅ Nuclear Dashboard initialized successfully');}, isDashboardPage(){return document.getElementById('dashboard-announcement-text')!== null || document.getElementById('leaderboard-list')!== null || document.getElementById('daily-challenge-content')!== null;}, async initAnnouncements(){const announcementElement = document.getElementById("dashboard-announcement-text"); if(!announcementElement)return; try{const data = await window.apiClient.getAnnouncements(); const announcement = data.announcements && data.announcements.length > 0 ? data.announcements[0] :{message: "Welcome to the Python learning platform! 🐍"}; announcementElement.textContent = announcement.message; console.log('✅ Announcements loaded');}catch(error){console.warn('Announcements API failed, using fallback'); announcementElement.textContent = "Welcome to the Python learning platform! 🐍";}}, async initLeaderboard(){const leaderboardList = document.getElementById("leaderboard-list"); if(!leaderboardList)return; try{const data = await window.apiClient.getLeaderboard(); if(data.leaderboard && data.leaderboard.length > 0){this.renderLeaderboard(data.leaderboard, leaderboardList);}else{this.renderEmptyLeaderboard(leaderboardList);}console.log('✅ Leaderboard loaded');}catch(error){console.warn('Leaderboard API failed, using fallback'); this.renderEmptyLeaderboard(leaderboardList);}}, renderLeaderboard(leaderboard, container){container.innerHTML = leaderboard.map((user, index)=> ` <div class="leaderboard-item ${index < 3 ? 'top-three' : ''}"> <div class="rank-badge ${this.getRankClass(index)}">${index + 1}</div> <img src="${user.avatar || '/static/img/default_avatar.png'}" class="leaderboard-avatar" alt="${user.name}'s avatar"> <div class="user-info"> <div class="user-name">${user.name}</div> <div class="user-stats"> <span class="points">${user.points}XP</span> <span class="separator">•</span> <span class="pycoins">${user.pycoins}PyCoins</span> </div> </div> <div class="rank-indicator"> ${this.getRankIcon(index)}</div> </div> `).join('');}, renderEmptyLeaderboard(container){container.innerHTML = ` <div class="leaderboard-empty"> <span class="material-symbols-outlined">emoji_events</span> <p>No leaderboard data available</p> <small>Complete lessons to appear on the leaderboard!</small> </div> `;}, getRankClass(index){switch(index){case 0: return 'gold'; case 1: return 'silver'; case 2: return 'bronze'; default: return 'regular';}}, getRankIcon(index){switch(index){case 0: return '🥇'; case 1: return '🥈'; case 2: return '🥉'; default: return `#${index + 1}`;}}, async initDailyChallenges(){const challengeContent = document.getElementById("daily-challenge-content"); if(!challengeContent)return; try{const data = await window.apiClient.getDailyChallenges(); if(data.challenges && data.challenges.length > 0){this.challenges = data.challenges; this.renderDailyChallenge(challengeContent); this.initChallengeNavigation();}else{this.renderEmptyChallenge(challengeContent);}console.log('✅ Daily challenges loaded');}catch(error){console.warn('Daily challenges API failed, using fallback'); this.renderEmptyChallenge(challengeContent);}}, renderDailyChallenge(container){const challenge = this.challenges[this.currentChallengeIndex]; container.innerHTML = ` <div class="challenge-header"> <h4>${challenge.title}</h4> <div class="challenge-meta"> <span class="difficulty ${challenge.difficulty}">${challenge.difficulty}</span> <span class="points">+${challenge.points}XP</span> <span class="pycoins">+${challenge.pycoins}PyCoins</span> </div> </div> <div class="challenge-description"> <p>${challenge.description}</p> </div> <div class="challenge-actions"> <button class="btn btn-primary start-challenge-btn" data-challenge-id="${challenge.id}"> <span class="material-symbols-outlined">play_arrow</span> Start Challenge </button> <div class="challenge-navigation"> <button class="btn btn-secondary prev-challenge" ${this.currentChallengeIndex === 0 ? 'disabled' : ''}> <span class="material-symbols-outlined">chevron_left</span> </button> <span class="challenge-counter">${this.currentChallengeIndex + 1}of ${this.challenges.length}</span> <button class="btn btn-secondary next-challenge" ${this.currentChallengeIndex === this.challenges.length - 1 ? 'disabled' : ''}> <span class="material-symbols-outlined">chevron_right</span> </button> </div> </div> `; const startBtn = container.querySelector('.start-challenge-btn'); if(startBtn){startBtn.addEventListener('click',()=>{this.startChallenge(challenge);});}}, renderEmptyChallenge(container){container.innerHTML = ` <div class="challenge-empty"> <span class="material-symbols-outlined">assignment</span> <h4>No Daily Challenges</h4> <p>Check back later for new challenges!</p> </div> `;}, initChallengeNavigation(){const challengeContent = document.getElementById("daily-challenge-content"); if(!challengeContent)return; challengeContent.addEventListener('click',(e)=>{if(e.target.closest('.prev-challenge')){this.navigateChallenge(-1);}else if(e.target.closest('.next-challenge')){this.navigateChallenge(1);}});}, navigateChallenge(direction){const newIndex = this.currentChallengeIndex + direction; if(newIndex >= 0 && newIndex < this.challenges.length){this.currentChallengeIndex = newIndex; const challengeContent = document.getElementById("daily-challenge-content"); if(challengeContent){this.renderDailyChallenge(challengeContent);}}}, startChallenge(challenge){console.log(`🎯 Starting challenge: ${challenge.title}`); const startBtn = document.querySelector('.start-challenge-btn'); if(startBtn){startBtn.innerHTML = '<span class="material-symbols-outlined">hourglass_empty</span> Loading...'; startBtn.disabled = true;}setTimeout(()=>{if(challenge.lesson_id){window.location.href = `/lesson/${challenge.lesson_id}`;}else{alert(`Challenge "${challenge.title}" would start here.\n\nThis is a placeholder - integrate with your lesson system.`); if(startBtn){startBtn.innerHTML = '<span class="material-symbols-outlined">play_arrow</span> Start Challenge'; startBtn.disabled = false;}}}, 1000);}, initNotifications(){this.showWelcomeNotification(); console.log('✅ Notifications initialized');}, showWelcomeNotification(){if(!localStorage.getItem('dashboard-welcomed')){setTimeout(()=>{this.showNotification('Welcome to your Python learning dashboard! 🎓', 'success'); localStorage.setItem('dashboard-welcomed', 'true');}, 1000);}}, showNotification(message, type = 'info'){const notification = document.createElement('div'); notification.className = `notification notification-${type}`; notification.innerHTML = ` <div class="notification-content"> <span class="notification-message">${message}</span> <button class="notification-close">&times;</button> </div> `; document.body.appendChild(notification); setTimeout(()=>{if(notification.parentNode){notification.remove();}}, 5000); notification.querySelector('.notification-close').addEventListener('click',()=>{notification.remove();});}, updateUserStats(points, pycoins){const sidebarPoints = document.getElementById('sidebar-user-points'); const sidebarCoins = document.getElementById('sidebar-user-currency'); if(sidebarPoints){sidebarPoints.textContent = points;}if(sidebarCoins){sidebarCoins.textContent = pycoins;}localStorage.setItem('userPoints', points); localStorage.setItem('userPyCoins', pycoins);}, refreshDashboard(){if(this.initialized){console.log('🔄 Refreshing dashboard...'); this.initAnnouncements(); this.initLeaderboard(); this.initDailyChallenges();}}}; if(document.readyState === 'loading'){document.addEventListener('DOMContentLoaded',()=> DashboardNuclear.init());}else{DashboardNuclear.init();}window.DashboardNuclear = DashboardNuclear; console.log('🎪 ✅ DASHBOARD NUCLEAR - Simplification complete!'); console.log('📊 Consolidated: 26KB → 8KB(69% reduction)'); console.log('🚫 Zero quiz logic, zero conflicts!');